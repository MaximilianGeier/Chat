@page "/login"

@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components
@inject IHttpClientFactory ClientFactory
@using Chat.Requests
@using Chat.Services
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<PageTitle>Index</PageTitle>

<div className="wrapper">
    <div className="container">
        <h1>Chack chat</h1>

        <EditForm Model="@authUser" OnSubmit="SendLogin" className="form" >
            <input @bind-value="@authUser.UserName" type="text" placeholder="Username"/>
            <input @bind-value="@authUser.Password" type="password" placeholder="Password"/>
            <button id="login-button">Вход</button>
        </EditForm>
        <p>@message</p>
    </div>
</div>


@code {
    LoginRequest authUser = new();
    string message = "";

    async Task SendLogin()
    {
        authUser.Email = "AAAA";
        message = "Выполняется проверка...";
        
        HttpClient httpClient = ClientFactory.CreateClient();
        var response = await httpClient.PostAsJsonAsync("http://localhost:5174/auth/login", authUser);
        if(response.IsSuccessStatusCode)
            navigationManager.NavigateTo("");
        else
            message = await response.Content.ReadAsStringAsync();
        
        
        /*string error = null;
        try
        {
            await authStateProvider.Login(authUser);
            message = "Вы авторизованы!";
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }*/

    // redirect
    }

}

@*@code {
    public HubConnection? hubConnection;
    public string Data;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5174/chathub")
            .Build();     
        
        hubConnection.On<string>("ReceiveMessage", (data) =>
        {
            Data = data;           
            InvokeAsync(StateHasChanged);      
            
        });

        await hubConnection.StartAsync();
    }
}*@