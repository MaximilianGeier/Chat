@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Net
@inject HttpClient HttpClient
@inject IHttpContextAccessor httpContextAccessor
@using System.Text
@using System.Net
@using BlazorApp1.Models
@using BlazorApp1.Requests
@using Chat.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject AuthRequestService AuthRequestService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chuck Chat</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (allChats is not null)
        {
            @foreach (var item in allChats)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@item.Id">
                        <span aria-hidden="true"></span> @item.Title
                    </NavLink>
                </div>
            }
        }
    </nav>
    <div class="chat__add">
        <EditForm Model="chatroom" OnSubmit="@createChatroom">
            <div class="chat__add-elements">
                <input class="form-control" placeholder="Добавить чат" @bind-value="@chatroom.Title"/>
                <button class="btn-plus" type="submit">
                    <img src="plus.png" alt="+">
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

}

@*Добавление чата*@
@code
{
    public HubConnection? hubConnection;
    public string Data;
    
    public List<ChatroomModel> allChats;
    CreateChatroom chatroom = new();
    async Task createChatroom()
    {
        List<string> addedUsers = new List<string> { };
        chatroom.UserNames = addedUsers;
        
        string url = "http://localhost:1977/chat";

        var response = await AuthRequestService.MakeAuthorizedPost("http://localhost:1977/chat", chatroom);
        if (response.IsSuccessStatusCode)
            await FetchAllChats();
    }
    
    async Task FetchAllChats()
    {
        var response = await AuthRequestService.MakeAuthorizedGet("http://localhost:1977/chat/all");
        if (response.IsSuccessStatusCode)
            allChats = await response.Content.ReadFromJsonAsync<List<ChatroomModel>>();
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchAllChats();
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:1977/chathub")
            .Build();

        hubConnection.On<List<ChatroomModel>>("ReceiveChatrooms", (data) =>
        {
            if (data != null) allChats = data;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }
}
