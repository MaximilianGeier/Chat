@page "/{PageId}"

<PageTitle>Index</PageTitle>

@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components
@using System.Text
@using BlazorApp1.Models
@using BlazorApp1.Requests
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Features
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Net
@using Chat.Services
@inject HttpClient HttpClient
@inject IHttpContextAccessor httpContextAccessor
@inject AuthRequestService AuthRequestService
@inject NavigationManager NavigationManager

<main class="container d-flex flex-column gap-4 main mb-5 mt-5">
    <div class="chat-container">
        @if (allMessages is not null)
        {
            @foreach (var item in allMessages)
            {
                <p class="msg send">
                    <span class="font-weight-bold">@item.UserName:</span> @item.Text
                </p>
            }
        }
    </div>
        <EditForm class="form--send-msg" Model="message" OnSubmit="@createMessage">
            <input class="form-control" @bind-value="@message.Text"/>
            <button class="btn-secondary" type="submit">Send</button>
        </EditForm>

    <div class="forms">
        <EditForm class="form__container" Model="@newUser" OnSubmit="@AddSubmit">
            <h2>Добавление пользователя</h2>
            <label for="name">Имя</label>
            <input class="form-control" @bind-value="@newUser.UserName" id="name" type="text" placeholder="Имя" name="Name">
            <button class="btn-secondary">Добавить</button>
            <p>@newMessage</p>
        </EditForm>
        
        <div class="form__container" Model="@delUser" OnSubmit="@AddSubmit">
            <h2>Удаление пользователя</h2>
            <label for="name">Никнейм</label>
            <input class="form-control" @bind-value="@delUser" id="name" type="text" placeholder="Имя" name="Name">
            <button class="btn-secondary">Добавить</button>
            <p>@delUserMessage</p>
        </div>
    </div>
    <button class="btn btn-danger" @onclick="DeleteChat">Удаление чата</button>
</main>

@* добавление пользоватя *@
@code {
    AddUser newUser = new();
    string? newMessage;
    string? delUserMessage;
    string? delUser;

    async Task AddSubmit()
    {
        newMessage = "Отправка данных";
        newUser.ChatroomId = chatId;
        var response = await AuthRequestService.MakeAuthorizedPost("http://localhost:1977/chat/user", newUser);
        newMessage = response.IsSuccessStatusCode ? "Пользователь добавлен" : "Пользователя не существует";
    }
    
    async Task DeleteChat()
    {
        var response = await AuthRequestService.MakeAuthorizedDelete("http://localhost:1977/chat/" + chatId);
        if (response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("/");
    }
    
    async Task DeleteUser()
    {
        delUserMessage = "Отправка данных";
        var response = await AuthRequestService.MakeAuthorizedDelete("http://localhost:1977/chat/user/" + delUser);
        delUserMessage = response.IsSuccessStatusCode ? "Пользователь удален" : "Пользователя не существует";
    }
}

@code {
    public HubConnection? hubConnection;
    public string Data;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:1977/chathub")
            .Build();

        hubConnection.On<string>("ReceiveMessage", (data) =>
        {
            Data = data;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<ChatMessageModel>("ReceiveNewMessage", (data) =>
        {
            if (data != null) allMessages?.Add(data);
            InvokeAsync(StateHasChanged);

        });

        await hubConnection.StartAsync();
    }
}

@*получение сообщений*@
@code
{
    List<ChatMessageModel>? allMessages;

    async Task OnChatClick(int id)
    {
        NavigationManager.NavigateTo(id.ToString());
    }
    
    async Task FetchMessages()
    {
        var response = await AuthRequestService.MakeAuthorizedGet("http://localhost:1977/chat/messages/" + chatId);
        if (response.IsSuccessStatusCode)
            allMessages = await response.Content.ReadFromJsonAsync<List<ChatMessageModel>?>();
    }
}

@*Отправка сообщения*@
@code
{
    CreateMessage message = new();
    async Task createMessage()
    {
        message.ChatId = chatId;
        Data = await (await AuthRequestService.MakeAuthorizedPost("http://localhost:1977/chat/message", message)).Content.ReadAsStringAsync();
    }
}


@code
{
    public int chatId;
    [Parameter]
    public string PageId{ get; set; }

    async protected override Task OnParametersSetAsync()
    {
        chatId = Int32.Parse(PageId);
        await FetchMessages();
        await base.OnParametersSetAsync();
    }

}
