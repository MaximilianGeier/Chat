@page "/{PageId}"

<PageTitle>Index</PageTitle>

@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components
@using System.Text
@using BlazorApp1.Models
@using BlazorApp1.Requests
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Features
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Net
@using Chat.Services
@inject HttpClient HttpClient
@inject IHttpContextAccessor httpContextAccessor
@inject AuthRequestService AuthRequestService
@inject NavigationManager NavigationManager


<div class="chat-container">
    @if (allMessages is not null)
    {
        @foreach (var item in allMessages)
        {
            <p class="msg send">
                <span class="msg__username">@item.UserName:</span> @item.Text
            </p>
        }
    }
</div>
<EditForm class="form__send-msg" Model="message" OnSubmit="@createMessage">
    <input class="form-control" placeholder="Новое сообщение" @bind-value="@message.Text"/>
    <button class="send-msg__btn btn__standart" type="submit">Послать это</button>
</EditForm>

<div class="@SettingsCssClass settings">
    <div class="forms">
        <div class="form__container">
            <EditForm Model="@newUser" OnSubmit="@AddSubmit">
                <h2>Добавление пользователя➕</h2>
                <label for="name">Имя</label>
                <input class="form-control" @bind-value="@newUser.UserName" id="name" type="text" placeholder="Имя" name="Name">
                <button class="btn-secondary">Добавить</button>
                <p>@newMessage</p>
            </EditForm>
        </div>
        <div class="form__container">
            <EditForm class="form__container" Model="@renamedChatroom" OnSubmit="@RenameChat">
                <h2>Переименовать чат✒</h2>
                <label for="name">Новое название</label>
                <input class="form-control" @bind-value="@renamedChatroom.Title" id="name" type="text" placeholder="Новое название" name="Name">
                <button type="submit" class="btn-secondary">Изменить</button>
            </EditForm>
        </div>
    </div>
    <div>
        <h2>Все участники чата:</h2>
        <ul>
            @foreach (var user in chatUsers)
            {
                <li>
                    @user.UserName
                    <button class="btn__standart" @onclick="() => DeleteUserFromChat(user.UserName)">x</button>
                </li>
            }
        </ul>
        <p>@delUserMessage</p>
    </div>
    <button class="btn btn-danger" @onclick="DeleteChat">Удаление чата</button>
</div>

@if (currentChatroom?.Admins.Any(a => a.UserName == authUser.UserName) ?? false)
{
    <button onclick="@ChangeSettingsVisability" class="btn__standart btn__settings">Настроить тут все</button>
}

@code {
    private bool settingsVisible = false;

    private string? SettingsCssClass => settingsVisible ? null : "hidden";

    private void ChangeSettingsVisability()
    {
        settingsVisible = !settingsVisible;
    }

}

@* добавление пользоватя *@
@code {
    AddUser newUser = new();
    string? newMessage;
    string? delUserMessage;
    string? delUser;

    async Task AddSubmit()
    {
        newMessage = "Отправка данных";
        newUser.ChatroomId = chatId;
        var response = await AuthRequestService.MakeAuthorizedPost("http://localhost:1977/chat/user", newUser);
        newMessage = response.IsSuccessStatusCode ? "Пользователь добавлен" : "Пользователя не существует";
    }
    
    async Task DeleteChat()
    {
        var response = await AuthRequestService.MakeAuthorizedDelete("http://localhost:1977/chat/" + chatId);
        if (response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("/");
        else
        {
            newMessage = response.StatusCode.ToString();
        }
    }
    
    async Task DeleteUser()
    {
        delUserMessage = "Отправка данных";
        var response = await AuthRequestService.MakeAuthorizedDelete("http://localhost:1977/chat/user/" + delUser);
        delUserMessage = response.IsSuccessStatusCode ? "Пользователь удален" : "Пользователя не существует";
    }
}

@code {
    public HubConnection? hubConnection;
    public string Data;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:1977/chathub")
            .Build();

        hubConnection.On<string>("ReceiveMessage", (data) =>
        {
            Data = data;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<ChatMessageModel>("ReceiveNewMessage", (data) =>
        {
            if (data != null) allMessages?.Add(data);
            InvokeAsync(StateHasChanged);

        });

        await hubConnection.StartAsync();
    }
}

@*получение сообщений*@
@code
{
    List<ChatMessageModel>? allMessages;

    async Task OnChatClick(int id)
    {
        NavigationManager.NavigateTo(id.ToString());
    }
    
    async Task FetchMessages()
    {
        var response = await AuthRequestService.MakeAuthorizedGet("http://localhost:1977/chat/messages/" + chatId);
        if (response.IsSuccessStatusCode)
            allMessages = await response.Content.ReadFromJsonAsync<List<ChatMessageModel>?>();
    }
}

@code {
        @*Отправка сообщения*@
    CreateMessage message = new();
    async Task createMessage()
    {
        message.ChatId = chatId;
        Data = await (await AuthRequestService.MakeAuthorizedPost("http://localhost:1977/chat/message", message)).Content.ReadAsStringAsync();
        message.Text = "";
    }
    
    List<UserModel> chatUsers = new();
    async Task getChatUsers(int id)
    {
        var response = await AuthRequestService.MakeAuthorizedGet($"http://localhost:1977/chat/{id}/users");
        if (response.IsSuccessStatusCode)
            chatUsers = await response.Content.ReadFromJsonAsync<List<UserModel>?>();
    }
    
    
    UserModel authUser = null;
    async Task getAuthUser()
    {
        var response = await AuthRequestService.MakeAuthorizedGet($"http://localhost:1977/user/authorized");
        if (response.IsSuccessStatusCode)
            authUser = await response.Content.ReadFromJsonAsync<UserModel?>();
        else 
            authUser = null;
    }
    
    ChatroomModel currentChatroom = null;
    async Task getCurrentChatroom()
    {
        var response = await AuthRequestService.MakeAuthorizedGet($"http://localhost:1977/chat/{chatId}");
        if (response.IsSuccessStatusCode)
            currentChatroom = await response.Content.ReadFromJsonAsync<ChatroomModel?>();
        else
            currentChatroom = null;
    }
    

    DeleteUserFromChat deleteUserFromChat = new();
    
    async Task DeleteUserFromChat(string userName)
    {
        deleteUserFromChat.UserName = userName;
        delUserMessage = "Удаляю";
        deleteUserFromChat.ChatId = chatId;
        var request = await AuthRequestService.MakeAuthorizedDelete("http://localhost:1977/chat/user", deleteUserFromChat);
        delUserMessage = request.IsSuccessStatusCode ? "Пользователь удалён!" : "Не удалось удалить пользователя: " + deleteUserFromChat.UserName + (await request.Content.ReadAsStringAsync());
        if(userName == authUser.UserName)
            NavigationManager.NavigateTo("/");
    }

    
    CreateChatroom renamedChatroom = new();
    
    async Task RenameChat()
    {
        renamedChatroom.UserNames = chatUsers.Select(user => user.UserName);
        var request = await AuthRequestService.MakeAuthorizedPatch($"http://localhost:1977/chat/{chatId}", renamedChatroom);
    }
    
    public int chatId;
    [Parameter]
    public string PageId{ get; set; }

    async protected override Task OnParametersSetAsync()
    {
        chatId = Int32.Parse(PageId);
        await FetchMessages();
        await base.OnParametersSetAsync();
        await getChatUsers(chatId);
        await getCurrentChatroom();
        await getAuthUser();
        settingsVisible = false;
    }
}